/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/reports/{id}": {
    /**
     * Update daily report
     * @description Update an existing daily report content
     */
    put: operations["updateReport"];
    /**
     * Delete daily report
     * @description Delete a daily report
     */
    delete: operations["deleteReport"];
  };
  "/api/reports/{id}/regenerate": {
    /**
     * Regenerate daily report
     * @description Regenerate an existing daily report with user feedback and additional information
     */
    post: operations["regenerateReport"];
  };
  "/api/reports/{id}/approve": {
    /**
     * Approve daily report
     * @description Approve a daily report, finalizing its content
     */
    post: operations["approveReport"];
  };
  "/api/reports/generate": {
    /**
     * Generate daily report
     * @description Generate a new daily report using AI based on GitHub, Toggl, and Notion data
     */
    post: operations["generateReport"];
  };
  "/api/credentials/toggl": {
    /**
     * Toggl認証情報作成
     * @description 新しいToggl認証情報を作成します
     */
    post: operations["create"];
  };
  "/api/credentials/notion": {
    /**
     * Notion認証情報作成
     * @description 新しいNotion認証情報を作成します
     */
    post: operations["create_1"];
  };
  "/api/credentials/github": {
    /**
     * GitHub認証情報作成
     * @description 新しいGitHub認証情報を作成します
     */
    post: operations["create_2"];
  };
  "/api/reports": {
    /**
     * Get daily reports list
     * @description Retrieve daily reports with optional filtering by date range and status
     */
    get: operations["getReports"];
  };
  "/api/reports/{id}/export": {
    /**
     * Export report as Markdown
     * @description Export a daily report in Markdown format for download
     */
    get: operations["exportReport"];
  };
  "/api/reports/{date}": {
    /**
     * Get daily report by date
     * @description Retrieve a specific daily report for the given date
     */
    get: operations["getReportByDate"];
  };
  "/api/credentials/toggl/test": {
    /**
     * ToggleTrack接続テスト
     * @description ToggleTrack API接続をテストして、アクセス権限を確認します
     */
    get: operations["testConnection"];
  };
  "/api/credentials/toggl/all": {
    /**
     * ユーザーの全Toggl認証情報取得
     * @description 指定されたユーザーの全Toggl認証情報を取得します
     */
    get: operations["findAllByUserId"];
  };
  "/api/credentials/notion/test": {
    /**
     * Notion接続テスト
     * @description Notion API接続をテストして、アクセス権限を確認します
     */
    get: operations["testConnection_1"];
  };
  "/api/credentials/notion/all": {
    /**
     * ユーザーの全Notion認証情報取得
     * @description 指定されたユーザーの全Notion認証情報を取得します
     */
    get: operations["findAllByUserId_1"];
  };
  "/api/credentials/github/test": {
    /**
     * GitHub接続テスト
     * @description GitHub リポジトリ接続をテストして、アクセス権限とリポジトリの存在を確認します
     */
    get: operations["testConnection_2"];
  };
  "/api/credentials/github/all": {
    /**
     * ユーザーの全GitHub認証情報取得
     * @description 指定されたユーザーの全GitHub認証情報を取得します
     */
    get: operations["findAllByUserId_2"];
  };
  "/api/credentials/toggl/{id}": {
    /**
     * Toggl認証情報削除
     * @description 指定されたIDのToggl認証情報を削除します
     */
    delete: operations["delete"];
  };
  "/api/credentials/notion/{id}": {
    /**
     * Notion認証情報削除
     * @description 指定されたIDのNotion認証情報を削除します
     */
    delete: operations["delete_1"];
  };
  "/api/credentials/github/{id}": {
    /**
     * GitHub認証情報削除
     * @description 指定されたIDのGitHub認証情報を削除します
     */
    delete: operations["delete_2"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Report update request */
    DailyReportUpdateRequestDto: {
      editedContent?: string;
      additionalNotes?: string;
    };
    DailyReportDto: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      userId?: string;
      /** Format: date */
      reportDate?: string;
      rawData?: string;
      generatedContent?: string;
      editedContent?: string;
      finalContent?: string;
      /** Format: int32 */
      generationCount?: number;
      additionalNotes?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      displayContent?: string;
    };
    /** @description Report regeneration request */
    ReportRegenerationRequestDto: {
      /** Format: uuid */
      reportId?: string;
      userFeedback?: string;
      additionalNotes?: string;
      valid?: boolean;
    };
    ReportGenerationResponseDto: {
      /** Format: uuid */
      reportId?: string;
      /** Format: uuid */
      userId?: string;
      /** Format: date */
      reportDate?: string;
      generatedContent?: string;
      status?: string;
      /** Format: int32 */
      generationCount?: number;
      /** Format: date-time */
      generatedAt?: string;
      success?: boolean;
      errorMessage?: string;
    };
    /** @description Report generation request */
    ReportGenerationRequestDto: {
      /** Format: uuid */
      userId?: string;
      /** Format: date */
      reportDate?: string;
      additionalNotes?: string;
      valid?: boolean;
    };
    /** @description Toggl Track認証情報作成リクエスト */
    TogglCredentialCreateRequestDto: {
      /**
       * @description Toggl Track APIキー
       * @example 1234567890abcdef
       */
      apiKey: string;
      /**
       * Format: int64
       * @description ワークスペースID
       * @example 12345
       */
      workspaceId?: number;
      /**
       * @description プロジェクトID一覧
       * @example [
       *   12345,
       *   67890
       * ]
       */
      projectIds?: number[];
      /**
       * @description デフォルトタグ一覧
       * @example [
       *   "development",
       *   "backend"
       * ]
       */
      defaultTags?: string[];
      /**
       * @description タイムゾーン
       * @default UTC
       * @example Asia/Tokyo
       */
      timeZone?: string;
      /**
       * @description 週末を含むかどうか
       * @default false
       * @example false
       */
      includeWeekends?: boolean;
    };
    /** @description Toggl Track認証情報レスポンス */
    TogglCredentialResponseDto: {
      /**
       * Format: uuid
       * @description 認証情報ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /**
       * Format: uuid
       * @description ユーザーID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      userId?: string;
      /**
       * @description マスクされたAPIキー
       * @example 1234****cdef
       */
      maskedApiKey?: string;
      /**
       * Format: int64
       * @description ワークスペースID
       * @example 12345
       */
      workspaceId?: number;
      /**
       * @description プロジェクトID一覧
       * @example [
       *   12345,
       *   67890
       * ]
       */
      projectIds?: number[];
      /**
       * @description デフォルトタグ一覧
       * @example [
       *   "development",
       *   "backend"
       * ]
       */
      defaultTags?: string[];
      /**
       * @description タイムゾーン
       * @example Asia/Tokyo
       */
      timeZone?: string;
      /**
       * @description 週末を含むかどうか
       * @example false
       */
      includeWeekends?: boolean;
      /**
       * Format: int32
       * @description プロジェクト数
       * @example 2
       */
      projectCount?: number;
      /**
       * Format: int32
       * @description タグ数
       * @example 2
       */
      tagCount?: number;
      /**
       * Format: date-time
       * @description 作成日時
       * @example 2023-01-01T00:00:00
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description 更新日時
       * @example 2023-01-01T00:00:00
       */
      updatedAt?: string;
      active?: boolean;
    };
    /** @description Notion認証情報作成リクエスト */
    NotionCredentialCreateRequestDto: {
      /**
       * @description Notion APIキー
       * @example secret_xxxxxxxxxxxxxxxxxxxx
       */
      apiKey: string;
      /**
       * @description データベースID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      databaseId?: string;
      /**
       * @description タイトルプロパティ名
       * @default Name
       * @example Name
       */
      titleProperty?: string;
      /**
       * @description ステータスプロパティ名
       * @default Status
       * @example Status
       */
      statusProperty?: string;
      /**
       * @description 日付プロパティ名
       * @default Date
       * @example Date
       */
      dateProperty?: string;
      /**
       * @description フィルター条件
       * @example {
       *   "status": [
       *     "In Progress",
       *     "Done"
       *   ]
       * }
       */
      filterConditions?: {
        [key: string]: unknown;
      };
    };
    /** @description Notion認証情報レスポンス */
    NotionCredentialResponseDto: {
      /**
       * Format: uuid
       * @description 認証情報ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /**
       * Format: uuid
       * @description ユーザーID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      userId?: string;
      /**
       * @description マスクされたAPIキー
       * @example secret_**********************xx
       */
      maskedApiKey?: string;
      /**
       * @description データベースID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      databaseId?: string;
      /**
       * @description タイトルプロパティ名
       * @example Name
       */
      titleProperty?: string;
      /**
       * @description ステータスプロパティ名
       * @example Status
       */
      statusProperty?: string;
      /**
       * @description 日付プロパティ名
       * @example Date
       */
      dateProperty?: string;
      /**
       * @description フィルター条件
       * @example {
       *   "status": [
       *     "In Progress",
       *     "Done"
       *   ]
       * }
       */
      filterConditions?: {
        [key: string]: unknown;
      };
      /**
       * Format: date-time
       * @description 作成日時
       * @example 2023-01-01T00:00:00
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description 更新日時
       * @example 2023-01-01T00:00:00
       */
      updatedAt?: string;
      active?: boolean;
      fullyConfigured?: boolean;
    };
    /** @description GitHub認証情報作成リクエスト */
    GitHubCredentialCreateRequestDto: {
      /**
       * @description GitHub APIキー
       * @example ghp_xxxxxxxxxxxxxxxxxxxx
       */
      apiKey: string;
      /**
       * @description GitHub APIベースURL
       * @default https://api.github.com
       * @example https://api.github.com
       */
      baseUrl?: string;
      /**
       * @description リポジトリオーナー
       * @example octocat
       */
      owner?: string;
      /**
       * @description リポジトリ名
       * @example Hello-World
       */
      repo?: string;
    };
    /** @description GitHub認証情報レスポンス */
    GitHubCredentialResponseDto: {
      /**
       * Format: uuid
       * @description 認証情報ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /**
       * Format: uuid
       * @description ユーザーID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      userId?: string;
      /**
       * @description マスクされたAPIキー
       * @example ghp_**********************xx
       */
      maskedApiKey?: string;
      /**
       * @description GitHub APIベースURL
       * @example https://api.github.com
       */
      baseUrl?: string;
      /**
       * @description リポジトリオーナー
       * @example octocat
       */
      owner?: string;
      /**
       * @description リポジトリ名
       * @example Hello-World
       */
      repo?: string;
      /**
       * @description 完全なリポジトリ名
       * @example octocat/Hello-World
       */
      fullRepoName?: string;
      /**
       * Format: date-time
       * @description 作成日時
       * @example 2023-01-01T00:00:00
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description 更新日時
       * @example 2023-01-01T00:00:00
       */
      updatedAt?: string;
      active?: boolean;
    };
    DailyReportListResponseDto: {
      reports?: components["schemas"]["DailyReportDto"][];
      /** Format: int32 */
      totalCount?: number;
      dateRange?: string;
      /** Format: int32 */
      actualCount?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Update daily report
   * @description Update an existing daily report content
   */
  updateReport: {
    parameters: {
      path: {
        /** @description Report ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DailyReportUpdateRequestDto"];
      };
    };
    responses: {
      /** @description Report updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DailyReportDto"];
        };
      };
      /** @description Invalid request data or report not editable */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Report not found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete daily report
   * @description Delete a daily report
   */
  deleteReport: {
    parameters: {
      path: {
        /** @description Report ID */
        id: string;
      };
    };
    responses: {
      /** @description Report deleted successfully */
      204: {
        content: never;
      };
      /** @description Report not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Regenerate daily report
   * @description Regenerate an existing daily report with user feedback and additional information
   */
  regenerateReport: {
    parameters: {
      path: {
        /** @description Report ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportRegenerationRequestDto"];
      };
    };
    responses: {
      /** @description Report regenerated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ReportGenerationResponseDto"];
        };
      };
      /** @description Invalid request data */
      400: {
        content: {
          "application/json": components["schemas"]["ReportGenerationResponseDto"];
        };
      };
      /** @description Report not found */
      404: {
        content: {
          "application/json": components["schemas"]["ReportGenerationResponseDto"];
        };
      };
      /** @description Internal server error or AI regeneration failure */
      500: {
        content: {
          "application/json": components["schemas"]["ReportGenerationResponseDto"];
        };
      };
    };
  };
  /**
   * Approve daily report
   * @description Approve a daily report, finalizing its content
   */
  approveReport: {
    parameters: {
      path: {
        /** @description Report ID */
        id: string;
      };
    };
    responses: {
      /** @description Report approved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DailyReportDto"];
        };
      };
      /** @description Report not found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Generate daily report
   * @description Generate a new daily report using AI based on GitHub, Toggl, and Notion data
   */
  generateReport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportGenerationRequestDto"];
      };
    };
    responses: {
      /** @description Report generated successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ReportGenerationResponseDto"];
        };
      };
      /** @description Invalid request data or report already exists for the date */
      400: {
        content: {
          "application/json": components["schemas"]["ReportGenerationResponseDto"];
        };
      };
      /** @description Internal server error or AI generation failure */
      500: {
        content: {
          "application/json": components["schemas"]["ReportGenerationResponseDto"];
        };
      };
    };
  };
  /**
   * Toggl認証情報作成
   * @description 新しいToggl認証情報を作成します
   */
  create: {
    parameters: {
      header: {
        /** @description ユーザーID */
        "X-User-Id": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TogglCredentialCreateRequestDto"];
      };
    };
    responses: {
      /** @description 認証情報の作成に成功 */
      201: {
        content: {
          "*/*": components["schemas"]["TogglCredentialResponseDto"];
        };
      };
      /** @description リクエストデータが不正 */
      400: {
        content: {
          "*/*": components["schemas"]["TogglCredentialResponseDto"];
        };
      };
      /** @description サーバーエラー */
      500: {
        content: {
          "*/*": components["schemas"]["TogglCredentialResponseDto"];
        };
      };
    };
  };
  /**
   * Notion認証情報作成
   * @description 新しいNotion認証情報を作成します
   */
  create_1: {
    parameters: {
      header: {
        /** @description ユーザーID */
        "X-User-Id": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotionCredentialCreateRequestDto"];
      };
    };
    responses: {
      /** @description 認証情報の作成に成功 */
      201: {
        content: {
          "*/*": components["schemas"]["NotionCredentialResponseDto"];
        };
      };
      /** @description リクエストデータが不正 */
      400: {
        content: {
          "*/*": components["schemas"]["NotionCredentialResponseDto"];
        };
      };
      /** @description サーバーエラー */
      500: {
        content: {
          "*/*": components["schemas"]["NotionCredentialResponseDto"];
        };
      };
    };
  };
  /**
   * GitHub認証情報作成
   * @description 新しいGitHub認証情報を作成します
   */
  create_2: {
    parameters: {
      header: {
        /** @description ユーザーID */
        "X-User-Id": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GitHubCredentialCreateRequestDto"];
      };
    };
    responses: {
      /** @description 認証情報の作成に成功 */
      201: {
        content: {
          "*/*": components["schemas"]["GitHubCredentialResponseDto"];
        };
      };
      /** @description リクエストデータが不正 */
      400: {
        content: {
          "*/*": components["schemas"]["GitHubCredentialResponseDto"];
        };
      };
      /** @description サーバーエラー */
      500: {
        content: {
          "*/*": components["schemas"]["GitHubCredentialResponseDto"];
        };
      };
    };
  };
  /**
   * Get daily reports list
   * @description Retrieve daily reports with optional filtering by date range and status
   */
  getReports: {
    parameters: {
      query: {
        /** @description User ID */
        userId: string;
        /**
         * @description Start date for filtering (YYYY-MM-DD format)
         * @example 2024-01-01
         */
        startDate?: string;
        /**
         * @description End date for filtering (YYYY-MM-DD format)
         * @example 2024-12-31
         */
        endDate?: string;
      };
    };
    responses: {
      /** @description Reports retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DailyReportListResponseDto"];
        };
      };
      /** @description Invalid request parameters */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Export report as Markdown
   * @description Export a daily report in Markdown format for download
   */
  exportReport: {
    parameters: {
      query?: {
        /** @description User name for the export header */
        userName?: string;
      };
      path: {
        /** @description Report ID */
        id: string;
      };
    };
    responses: {
      /** @description Markdown export successful */
      200: {
        content: {
          "text/markdown": unknown;
        };
      };
      /** @description Report not found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get daily report by date
   * @description Retrieve a specific daily report for the given date
   */
  getReportByDate: {
    parameters: {
      query: {
        /** @description User ID */
        userId: string;
      };
      path: {
        /**
         * @description Report date in YYYY-MM-DD format
         * @example 2024-01-15
         */
        date: string;
      };
    };
    responses: {
      /** @description Report retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DailyReportDto"];
        };
      };
      /** @description Invalid date format */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Report not found for the specified date */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * ToggleTrack接続テスト
   * @description ToggleTrack API接続をテストして、アクセス権限を確認します
   */
  testConnection: {
    responses: {
      /** @description 接続テストが正常に完了 */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** @description 内部サーバーエラーまたはToggleTrack API接続失敗 */
      500: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  /**
   * ユーザーの全Toggl認証情報取得
   * @description 指定されたユーザーの全Toggl認証情報を取得します
   */
  findAllByUserId: {
    parameters: {
      header: {
        /** @description ユーザーID */
        "X-User-Id": string;
      };
    };
    responses: {
      /** @description 認証情報の取得に成功 */
      200: {
        content: {
          "*/*": components["schemas"]["TogglCredentialResponseDto"][];
        };
      };
      /** @description サーバーエラー */
      500: {
        content: {
          "*/*": components["schemas"]["TogglCredentialResponseDto"][];
        };
      };
    };
  };
  /**
   * Notion接続テスト
   * @description Notion API接続をテストして、アクセス権限を確認します
   */
  testConnection_1: {
    responses: {
      /** @description 接続テストが正常に完了 */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** @description 内部サーバーエラーまたはNotion API接続失敗 */
      500: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  /**
   * ユーザーの全Notion認証情報取得
   * @description 指定されたユーザーの全Notion認証情報を取得します
   */
  findAllByUserId_1: {
    parameters: {
      header: {
        /** @description ユーザーID */
        "X-User-Id": string;
      };
    };
    responses: {
      /** @description 認証情報の取得に成功 */
      200: {
        content: {
          "*/*": components["schemas"]["NotionCredentialResponseDto"][];
        };
      };
      /** @description サーバーエラー */
      500: {
        content: {
          "*/*": components["schemas"]["NotionCredentialResponseDto"][];
        };
      };
    };
  };
  /**
   * GitHub接続テスト
   * @description GitHub リポジトリ接続をテストして、アクセス権限とリポジトリの存在を確認します
   */
  testConnection_2: {
    parameters: {
      query: {
        /**
         * @description リポジトリオーナー/組織名
         * @example octocat
         */
        owner: string;
        /**
         * @description リポジトリ名
         * @example Hello-World
         */
        repo: string;
      };
    };
    responses: {
      /** @description 接続テストが正常に完了 */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** @description リクエストパラメータが無効（owner または repo が不足） */
      400: {
        content: {
          "*/*": boolean;
        };
      };
      /** @description 内部サーバーエラーまたは接続失敗 */
      500: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  /**
   * ユーザーの全GitHub認証情報取得
   * @description 指定されたユーザーの全GitHub認証情報を取得します
   */
  findAllByUserId_2: {
    parameters: {
      header: {
        /** @description ユーザーID */
        "X-User-Id": string;
      };
    };
    responses: {
      /** @description 認証情報の取得に成功 */
      200: {
        content: {
          "*/*": components["schemas"]["GitHubCredentialResponseDto"][];
        };
      };
      /** @description サーバーエラー */
      500: {
        content: {
          "*/*": components["schemas"]["GitHubCredentialResponseDto"][];
        };
      };
    };
  };
  /**
   * Toggl認証情報削除
   * @description 指定されたIDのToggl認証情報を削除します
   */
  delete: {
    parameters: {
      path: {
        /** @description 認証情報ID */
        id: string;
      };
    };
    responses: {
      /** @description 認証情報の削除に成功 */
      204: {
        content: never;
      };
      /** @description 認証情報が見つからない */
      404: {
        content: never;
      };
      /** @description サーバーエラー */
      500: {
        content: never;
      };
    };
  };
  /**
   * Notion認証情報削除
   * @description 指定されたIDのNotion認証情報を削除します
   */
  delete_1: {
    parameters: {
      path: {
        /** @description 認証情報ID */
        id: string;
      };
    };
    responses: {
      /** @description 認証情報の削除に成功 */
      204: {
        content: never;
      };
      /** @description 認証情報が見つからない */
      404: {
        content: never;
      };
      /** @description サーバーエラー */
      500: {
        content: never;
      };
    };
  };
  /**
   * GitHub認証情報削除
   * @description 指定されたIDのGitHub認証情報を削除します
   */
  delete_2: {
    parameters: {
      path: {
        /** @description 認証情報ID */
        id: string;
      };
    };
    responses: {
      /** @description 認証情報の削除に成功 */
      204: {
        content: never;
      };
      /** @description 認証情報が見つからない */
      404: {
        content: never;
      };
      /** @description サーバーエラー */
      500: {
        content: never;
      };
    };
  };
}

buildscript {
    dependencies {
        classpath("org.flywaydb:flyway-database-postgresql:11.11.1")
    }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
    id "org.flywaydb.flyway" version "11.11.1"
	id 'nu.studer.jooq' version '8.0'
    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		name = "Spring Snapshots"
		url = uri("https://repo.spring.io/snapshot")
	}
	maven {
		name = "Central Portal Snapshots" 
		url = uri("https://central.sonatype.com/repository/maven-snapshots/")
	}
}

ext {
	springAiVersion = "1.0.0-M6"
}

dependencies {
	implementation platform("org.springframework.ai:spring-ai-bom:${springAiVersion}")
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.11'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
	implementation 'org.jooq:jooq-codegen'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	jooqGenerator 'org.postgresql:postgresql:42.7.7'
	jooqGenerator 'org.jooq:jooq-codegen'
    jooqGenerator sourceSets.main.output
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

flyway {
    url = 'jdbc:postgresql://localhost:5434/nippogen'
    user = 'postgres'
    password = 'postgres'
}

jooq {
	version = dependencyManagement.importedProperties['jooq.version']
    configurations {
        main {
            generateSchemaSourceOnCompilation = false

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5434/nippogen'
                    user = 'postgres'
                    password = 'postgres'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    target {
                        packageName = 'com.example.backend.jooq'
                        directory = 'src/jooq'  // default (can be omitted)
                    }
                    strategy {
                        name = 'com.example.backend.common.jooq.CustomGeneratorStrategy'
                    }
                }
            }
        }
    }
}

// generateJooqをする前にflywayのマイグレーションを実行する
tasks.named("generateJooq") {
    dependsOn("flywayMigrate")
}

openApi {
    apiDocsUrl.set("http://localhost:8080/api-docs")
    outputDir.set(file("openapi"))
    outputFileName.set("openapi.json")
    waitTimeInSeconds.set(10)
}

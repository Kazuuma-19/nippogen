/*
 * This file is generated by jOOQ.
 */
package com.example.backend.jooq;


import com.example.backend.jooq.tables.JDailyReports;
import com.example.backend.jooq.tables.JFlywaySchemaHistory;
import com.example.backend.jooq.tables.JGithubCredentials;
import com.example.backend.jooq.tables.JNotionCredentials;
import com.example.backend.jooq.tables.JTogglCredentials;
import com.example.backend.jooq.tables.JUsers;
import com.example.backend.jooq.tables.records.JDailyReportsRecord;
import com.example.backend.jooq.tables.records.JFlywaySchemaHistoryRecord;
import com.example.backend.jooq.tables.records.JGithubCredentialsRecord;
import com.example.backend.jooq.tables.records.JNotionCredentialsRecord;
import com.example.backend.jooq.tables.records.JTogglCredentialsRecord;
import com.example.backend.jooq.tables.records.JUsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<JDailyReportsRecord> DAILY_REPORTS_PKEY = Internal.createUniqueKey(JDailyReports.DAILY_REPORTS, DSL.name("daily_reports_pkey"), new TableField[] { JDailyReports.DAILY_REPORTS.ID }, true);
    public static final UniqueKey<JFlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(JFlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { JFlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<JGithubCredentialsRecord> GITHUB_CREDENTIALS_PKEY = Internal.createUniqueKey(JGithubCredentials.GITHUB_CREDENTIALS, DSL.name("github_credentials_pkey"), new TableField[] { JGithubCredentials.GITHUB_CREDENTIALS.ID }, true);
    public static final UniqueKey<JNotionCredentialsRecord> NOTION_CREDENTIALS_PKEY = Internal.createUniqueKey(JNotionCredentials.NOTION_CREDENTIALS, DSL.name("notion_credentials_pkey"), new TableField[] { JNotionCredentials.NOTION_CREDENTIALS.ID }, true);
    public static final UniqueKey<JTogglCredentialsRecord> TOGGL_CREDENTIALS_PKEY = Internal.createUniqueKey(JTogglCredentials.TOGGL_CREDENTIALS, DSL.name("toggl_credentials_pkey"), new TableField[] { JTogglCredentials.TOGGL_CREDENTIALS.ID }, true);
    public static final UniqueKey<JUsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(JUsers.USERS, DSL.name("users_email_key"), new TableField[] { JUsers.USERS.EMAIL }, true);
    public static final UniqueKey<JUsersRecord> USERS_PKEY = Internal.createUniqueKey(JUsers.USERS, DSL.name("users_pkey"), new TableField[] { JUsers.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<JDailyReportsRecord, JUsersRecord> DAILY_REPORTS__DAILY_REPORTS_USER_ID_FKEY = Internal.createForeignKey(JDailyReports.DAILY_REPORTS, DSL.name("daily_reports_user_id_fkey"), new TableField[] { JDailyReports.DAILY_REPORTS.USER_ID }, Keys.USERS_PKEY, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JGithubCredentialsRecord, JUsersRecord> GITHUB_CREDENTIALS__GITHUB_CREDENTIALS_USER_ID_FKEY = Internal.createForeignKey(JGithubCredentials.GITHUB_CREDENTIALS, DSL.name("github_credentials_user_id_fkey"), new TableField[] { JGithubCredentials.GITHUB_CREDENTIALS.USER_ID }, Keys.USERS_PKEY, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JNotionCredentialsRecord, JUsersRecord> NOTION_CREDENTIALS__NOTION_CREDENTIALS_USER_ID_FKEY = Internal.createForeignKey(JNotionCredentials.NOTION_CREDENTIALS, DSL.name("notion_credentials_user_id_fkey"), new TableField[] { JNotionCredentials.NOTION_CREDENTIALS.USER_ID }, Keys.USERS_PKEY, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JTogglCredentialsRecord, JUsersRecord> TOGGL_CREDENTIALS__TOGGL_CREDENTIALS_USER_ID_FKEY = Internal.createForeignKey(JTogglCredentials.TOGGL_CREDENTIALS, DSL.name("toggl_credentials_user_id_fkey"), new TableField[] { JTogglCredentials.TOGGL_CREDENTIALS.USER_ID }, Keys.USERS_PKEY, new TableField[] { JUsers.USERS.ID }, true);
}

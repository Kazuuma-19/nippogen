/*
 * This file is generated by jOOQ.
 */
package com.example.backend.jooq.tables;


import com.example.backend.jooq.Indexes;
import com.example.backend.jooq.JPublic;
import com.example.backend.jooq.Keys;
import com.example.backend.jooq.tables.JDailyReports.JDailyReportsPath;
import com.example.backend.jooq.tables.JGithubCredentials.JGithubCredentialsPath;
import com.example.backend.jooq.tables.JNotionCredentials.JNotionCredentialsPath;
import com.example.backend.jooq.tables.JTogglCredentials.JTogglCredentialsPath;
import com.example.backend.jooq.tables.records.JUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JUsers extends TableImpl<JUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final JUsers USERS = new JUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUsersRecord> getRecordType() {
        return JUsersRecord.class;
    }

    /**
     * The column <code>public.users.id</code>.
     */
    public final TableField<JUsersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.users.email</code>.
     */
    public final TableField<JUsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users.password_hash</code>.
     */
    public final TableField<JUsersRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users.name</code>.
     */
    public final TableField<JUsersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.users.created_at</code>.
     */
    public final TableField<JUsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.users.updated_at</code>.
     */
    public final TableField<JUsersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JUsers(Name alias, Table<JUsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JUsers(Name alias, Table<JUsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public JUsers(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public JUsers(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>public.users</code> table reference
     */
    public JUsers() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> JUsers(Table<O> path, ForeignKey<O, JUsersRecord> childPath, InverseForeignKey<O, JUsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JUsersPath extends JUsers implements Path<JUsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JUsersPath(Table<O> path, ForeignKey<O, JUsersRecord> childPath, InverseForeignKey<O, JUsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JUsersPath(Name alias, Table<JUsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JUsersPath as(String alias) {
            return new JUsersPath(DSL.name(alias), this);
        }

        @Override
        public JUsersPath as(Name alias) {
            return new JUsersPath(alias, this);
        }

        @Override
        public JUsersPath as(Table<?> alias) {
            return new JUsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USERS_EMAIL);
    }

    @Override
    public UniqueKey<JUsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<UniqueKey<JUsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERS_EMAIL_KEY);
    }

    private transient JDailyReportsPath _dailyReports;

    /**
     * Get the implicit to-many join path to the
     * <code>public.daily_reports</code> table
     */
    public JDailyReportsPath dailyReports() {
        if (_dailyReports == null)
            _dailyReports = new JDailyReportsPath(this, null, Keys.DAILY_REPORTS__DAILY_REPORTS_USER_ID_FKEY.getInverseKey());

        return _dailyReports;
    }

    private transient JGithubCredentialsPath _githubCredentials;

    /**
     * Get the implicit to-many join path to the
     * <code>public.github_credentials</code> table
     */
    public JGithubCredentialsPath githubCredentials() {
        if (_githubCredentials == null)
            _githubCredentials = new JGithubCredentialsPath(this, null, Keys.GITHUB_CREDENTIALS__GITHUB_CREDENTIALS_USER_ID_FKEY.getInverseKey());

        return _githubCredentials;
    }

    private transient JNotionCredentialsPath _notionCredentials;

    /**
     * Get the implicit to-many join path to the
     * <code>public.notion_credentials</code> table
     */
    public JNotionCredentialsPath notionCredentials() {
        if (_notionCredentials == null)
            _notionCredentials = new JNotionCredentialsPath(this, null, Keys.NOTION_CREDENTIALS__NOTION_CREDENTIALS_USER_ID_FKEY.getInverseKey());

        return _notionCredentials;
    }

    private transient JTogglCredentialsPath _togglCredentials;

    /**
     * Get the implicit to-many join path to the
     * <code>public.toggl_credentials</code> table
     */
    public JTogglCredentialsPath togglCredentials() {
        if (_togglCredentials == null)
            _togglCredentials = new JTogglCredentialsPath(this, null, Keys.TOGGL_CREDENTIALS__TOGGL_CREDENTIALS_USER_ID_FKEY.getInverseKey());

        return _togglCredentials;
    }

    @Override
    public JUsers as(String alias) {
        return new JUsers(DSL.name(alias), this);
    }

    @Override
    public JUsers as(Name alias) {
        return new JUsers(alias, this);
    }

    @Override
    public JUsers as(Table<?> alias) {
        return new JUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(String name) {
        return new JUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(Name name) {
        return new JUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(Table<?> name) {
        return new JUsers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Condition condition) {
        return new JUsers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

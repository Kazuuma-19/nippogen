/*
 * This file is generated by jOOQ.
 */
package com.example.backend.jooq.tables;


import com.example.backend.jooq.Indexes;
import com.example.backend.jooq.Keys;
import com.example.backend.jooq.Public;
import com.example.backend.jooq.tables.Users.UsersPath;
import com.example.backend.jooq.tables.records.NotionCredentialsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotionCredentials extends TableImpl<NotionCredentialsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.notion_credentials</code>
     */
    public static final NotionCredentials NOTION_CREDENTIALS = new NotionCredentials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotionCredentialsRecord> getRecordType() {
        return NotionCredentialsRecord.class;
    }

    /**
     * The column <code>public.notion_credentials.id</code>.
     */
    public final TableField<NotionCredentialsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.notion_credentials.user_id</code>.
     */
    public final TableField<NotionCredentialsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.notion_credentials.api_key</code>.
     */
    public final TableField<NotionCredentialsRecord, String> API_KEY = createField(DSL.name("api_key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.notion_credentials.database_id</code>.
     */
    public final TableField<NotionCredentialsRecord, String> DATABASE_ID = createField(DSL.name("database_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.notion_credentials.title_property</code>.
     */
    public final TableField<NotionCredentialsRecord, String> TITLE_PROPERTY = createField(DSL.name("title_property"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.notion_credentials.status_property</code>.
     */
    public final TableField<NotionCredentialsRecord, String> STATUS_PROPERTY = createField(DSL.name("status_property"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.notion_credentials.date_property</code>.
     */
    public final TableField<NotionCredentialsRecord, String> DATE_PROPERTY = createField(DSL.name("date_property"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.notion_credentials.filter_conditions</code>.
     */
    public final TableField<NotionCredentialsRecord, JSONB> FILTER_CONDITIONS = createField(DSL.name("filter_conditions"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.notion_credentials.is_active</code>.
     */
    public final TableField<NotionCredentialsRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.notion_credentials.created_at</code>.
     */
    public final TableField<NotionCredentialsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.notion_credentials.updated_at</code>.
     */
    public final TableField<NotionCredentialsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private NotionCredentials(Name alias, Table<NotionCredentialsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotionCredentials(Name alias, Table<NotionCredentialsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.notion_credentials</code> table reference
     */
    public NotionCredentials(String alias) {
        this(DSL.name(alias), NOTION_CREDENTIALS);
    }

    /**
     * Create an aliased <code>public.notion_credentials</code> table reference
     */
    public NotionCredentials(Name alias) {
        this(alias, NOTION_CREDENTIALS);
    }

    /**
     * Create a <code>public.notion_credentials</code> table reference
     */
    public NotionCredentials() {
        this(DSL.name("notion_credentials"), null);
    }

    public <O extends Record> NotionCredentials(Table<O> path, ForeignKey<O, NotionCredentialsRecord> childPath, InverseForeignKey<O, NotionCredentialsRecord> parentPath) {
        super(path, childPath, parentPath, NOTION_CREDENTIALS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotionCredentialsPath extends NotionCredentials implements Path<NotionCredentialsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotionCredentialsPath(Table<O> path, ForeignKey<O, NotionCredentialsRecord> childPath, InverseForeignKey<O, NotionCredentialsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotionCredentialsPath(Name alias, Table<NotionCredentialsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotionCredentialsPath as(String alias) {
            return new NotionCredentialsPath(DSL.name(alias), this);
        }

        @Override
        public NotionCredentialsPath as(Name alias) {
            return new NotionCredentialsPath(alias, this);
        }

        @Override
        public NotionCredentialsPath as(Table<?> alias) {
            return new NotionCredentialsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_NOTION_CREDENTIALS_USER_ID, Indexes.IDX_NOTION_CREDENTIALS_USER_UNIQUE);
    }

    @Override
    public UniqueKey<NotionCredentialsRecord> getPrimaryKey() {
        return Keys.NOTION_CREDENTIALS_PKEY;
    }

    @Override
    public List<ForeignKey<NotionCredentialsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTION_CREDENTIALS__NOTION_CREDENTIALS_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.NOTION_CREDENTIALS__NOTION_CREDENTIALS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public NotionCredentials as(String alias) {
        return new NotionCredentials(DSL.name(alias), this);
    }

    @Override
    public NotionCredentials as(Name alias) {
        return new NotionCredentials(alias, this);
    }

    @Override
    public NotionCredentials as(Table<?> alias) {
        return new NotionCredentials(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotionCredentials rename(String name) {
        return new NotionCredentials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotionCredentials rename(Name name) {
        return new NotionCredentials(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotionCredentials rename(Table<?> name) {
        return new NotionCredentials(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotionCredentials where(Condition condition) {
        return new NotionCredentials(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotionCredentials where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotionCredentials where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotionCredentials where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotionCredentials where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotionCredentials where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotionCredentials where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotionCredentials where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotionCredentials whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotionCredentials whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, String, String, String, String, String, JSONB, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super JSONB, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super JSONB, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

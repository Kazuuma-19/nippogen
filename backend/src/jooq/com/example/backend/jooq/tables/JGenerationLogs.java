/*
 * This file is generated by jOOQ.
 */
package com.example.backend.jooq.tables;


import com.example.backend.jooq.Indexes;
import com.example.backend.jooq.JPublic;
import com.example.backend.jooq.Keys;
import com.example.backend.jooq.tables.JDailyReports.JDailyReportsPath;
import com.example.backend.jooq.tables.records.JGenerationLogsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JGenerationLogs extends TableImpl<JGenerationLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.generation_logs</code>
     */
    public static final JGenerationLogs GENERATION_LOGS = new JGenerationLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JGenerationLogsRecord> getRecordType() {
        return JGenerationLogsRecord.class;
    }

    /**
     * The column <code>public.generation_logs.id</code>.
     */
    public final TableField<JGenerationLogsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.generation_logs.report_id</code>.
     */
    public final TableField<JGenerationLogsRecord, UUID> REPORT_ID = createField(DSL.name("report_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.generation_logs.generation_number</code>.
     */
    public final TableField<JGenerationLogsRecord, Integer> GENERATION_NUMBER = createField(DSL.name("generation_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.generation_logs.prompt</code>.
     */
    public final TableField<JGenerationLogsRecord, String> PROMPT = createField(DSL.name("prompt"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.generation_logs.model_response</code>.
     */
    public final TableField<JGenerationLogsRecord, String> MODEL_RESPONSE = createField(DSL.name("model_response"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.generation_logs.user_feedback</code>.
     */
    public final TableField<JGenerationLogsRecord, String> USER_FEEDBACK = createField(DSL.name("user_feedback"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.generation_logs.created_at</code>.
     */
    public final TableField<JGenerationLogsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JGenerationLogs(Name alias, Table<JGenerationLogsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JGenerationLogs(Name alias, Table<JGenerationLogsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.generation_logs</code> table reference
     */
    public JGenerationLogs(String alias) {
        this(DSL.name(alias), GENERATION_LOGS);
    }

    /**
     * Create an aliased <code>public.generation_logs</code> table reference
     */
    public JGenerationLogs(Name alias) {
        this(alias, GENERATION_LOGS);
    }

    /**
     * Create a <code>public.generation_logs</code> table reference
     */
    public JGenerationLogs() {
        this(DSL.name("generation_logs"), null);
    }

    public <O extends Record> JGenerationLogs(Table<O> path, ForeignKey<O, JGenerationLogsRecord> childPath, InverseForeignKey<O, JGenerationLogsRecord> parentPath) {
        super(path, childPath, parentPath, GENERATION_LOGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JGenerationLogsPath extends JGenerationLogs implements Path<JGenerationLogsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JGenerationLogsPath(Table<O> path, ForeignKey<O, JGenerationLogsRecord> childPath, InverseForeignKey<O, JGenerationLogsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JGenerationLogsPath(Name alias, Table<JGenerationLogsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JGenerationLogsPath as(String alias) {
            return new JGenerationLogsPath(DSL.name(alias), this);
        }

        @Override
        public JGenerationLogsPath as(Name alias) {
            return new JGenerationLogsPath(alias, this);
        }

        @Override
        public JGenerationLogsPath as(Table<?> alias) {
            return new JGenerationLogsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_GENERATION_LOGS_REPORT_ID);
    }

    @Override
    public UniqueKey<JGenerationLogsRecord> getPrimaryKey() {
        return Keys.GENERATION_LOGS_PKEY;
    }

    @Override
    public List<ForeignKey<JGenerationLogsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GENERATION_LOGS__GENERATION_LOGS_REPORT_ID_FKEY);
    }

    private transient JDailyReportsPath _dailyReports;

    /**
     * Get the implicit join path to the <code>public.daily_reports</code>
     * table.
     */
    public JDailyReportsPath dailyReports() {
        if (_dailyReports == null)
            _dailyReports = new JDailyReportsPath(this, Keys.GENERATION_LOGS__GENERATION_LOGS_REPORT_ID_FKEY, null);

        return _dailyReports;
    }

    @Override
    public JGenerationLogs as(String alias) {
        return new JGenerationLogs(DSL.name(alias), this);
    }

    @Override
    public JGenerationLogs as(Name alias) {
        return new JGenerationLogs(alias, this);
    }

    @Override
    public JGenerationLogs as(Table<?> alias) {
        return new JGenerationLogs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGenerationLogs rename(String name) {
        return new JGenerationLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGenerationLogs rename(Name name) {
        return new JGenerationLogs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGenerationLogs rename(Table<?> name) {
        return new JGenerationLogs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGenerationLogs where(Condition condition) {
        return new JGenerationLogs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGenerationLogs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGenerationLogs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGenerationLogs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGenerationLogs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGenerationLogs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGenerationLogs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGenerationLogs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGenerationLogs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGenerationLogs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, Integer, String, String, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

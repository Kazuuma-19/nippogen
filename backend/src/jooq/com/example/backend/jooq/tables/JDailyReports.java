/*
 * This file is generated by jOOQ.
 */
package com.example.backend.jooq.tables;


import com.example.backend.jooq.Indexes;
import com.example.backend.jooq.JPublic;
import com.example.backend.jooq.Keys;
import com.example.backend.jooq.tables.JGenerationLogs.JGenerationLogsPath;
import com.example.backend.jooq.tables.JUsers.JUsersPath;
import com.example.backend.jooq.tables.records.JDailyReportsRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JDailyReports extends TableImpl<JDailyReportsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.daily_reports</code>
     */
    public static final JDailyReports DAILY_REPORTS = new JDailyReports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JDailyReportsRecord> getRecordType() {
        return JDailyReportsRecord.class;
    }

    /**
     * The column <code>public.daily_reports.id</code>.
     */
    public final TableField<JDailyReportsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.daily_reports.user_id</code>.
     */
    public final TableField<JDailyReportsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.daily_reports.report_date</code>.
     */
    public final TableField<JDailyReportsRecord, LocalDate> REPORT_DATE = createField(DSL.name("report_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.daily_reports.raw_data</code>.
     */
    public final TableField<JDailyReportsRecord, JSONB> RAW_DATA = createField(DSL.name("raw_data"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.daily_reports.generated_content</code>.
     */
    public final TableField<JDailyReportsRecord, String> GENERATED_CONTENT = createField(DSL.name("generated_content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.daily_reports.edited_content</code>.
     */
    public final TableField<JDailyReportsRecord, String> EDITED_CONTENT = createField(DSL.name("edited_content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.daily_reports.final_content</code>.
     */
    public final TableField<JDailyReportsRecord, String> FINAL_CONTENT = createField(DSL.name("final_content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.daily_reports.status</code>.
     */
    public final TableField<JDailyReportsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.field(DSL.raw("'DRAFT'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.daily_reports.generation_count</code>.
     */
    public final TableField<JDailyReportsRecord, Integer> GENERATION_COUNT = createField(DSL.name("generation_count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.daily_reports.additional_notes</code>.
     */
    public final TableField<JDailyReportsRecord, String> ADDITIONAL_NOTES = createField(DSL.name("additional_notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.daily_reports.created_at</code>.
     */
    public final TableField<JDailyReportsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.daily_reports.updated_at</code>.
     */
    public final TableField<JDailyReportsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JDailyReports(Name alias, Table<JDailyReportsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JDailyReports(Name alias, Table<JDailyReportsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.daily_reports</code> table reference
     */
    public JDailyReports(String alias) {
        this(DSL.name(alias), DAILY_REPORTS);
    }

    /**
     * Create an aliased <code>public.daily_reports</code> table reference
     */
    public JDailyReports(Name alias) {
        this(alias, DAILY_REPORTS);
    }

    /**
     * Create a <code>public.daily_reports</code> table reference
     */
    public JDailyReports() {
        this(DSL.name("daily_reports"), null);
    }

    public <O extends Record> JDailyReports(Table<O> path, ForeignKey<O, JDailyReportsRecord> childPath, InverseForeignKey<O, JDailyReportsRecord> parentPath) {
        super(path, childPath, parentPath, DAILY_REPORTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JDailyReportsPath extends JDailyReports implements Path<JDailyReportsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JDailyReportsPath(Table<O> path, ForeignKey<O, JDailyReportsRecord> childPath, InverseForeignKey<O, JDailyReportsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JDailyReportsPath(Name alias, Table<JDailyReportsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JDailyReportsPath as(String alias) {
            return new JDailyReportsPath(DSL.name(alias), this);
        }

        @Override
        public JDailyReportsPath as(Name alias) {
            return new JDailyReportsPath(alias, this);
        }

        @Override
        public JDailyReportsPath as(Table<?> alias) {
            return new JDailyReportsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_DAILY_REPORTS_REPORT_DATE, Indexes.IDX_DAILY_REPORTS_USER_DATE, Indexes.IDX_DAILY_REPORTS_USER_ID);
    }

    @Override
    public UniqueKey<JDailyReportsRecord> getPrimaryKey() {
        return Keys.DAILY_REPORTS_PKEY;
    }

    @Override
    public List<ForeignKey<JDailyReportsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DAILY_REPORTS__DAILY_REPORTS_USER_ID_FKEY);
    }

    private transient JUsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public JUsersPath users() {
        if (_users == null)
            _users = new JUsersPath(this, Keys.DAILY_REPORTS__DAILY_REPORTS_USER_ID_FKEY, null);

        return _users;
    }

    private transient JGenerationLogsPath _generationLogs;

    /**
     * Get the implicit to-many join path to the
     * <code>public.generation_logs</code> table
     */
    public JGenerationLogsPath generationLogs() {
        if (_generationLogs == null)
            _generationLogs = new JGenerationLogsPath(this, null, Keys.GENERATION_LOGS__GENERATION_LOGS_REPORT_ID_FKEY.getInverseKey());

        return _generationLogs;
    }

    @Override
    public List<Check<JDailyReportsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("daily_reports_status_check"), "(((status)::text = ANY ((ARRAY['DRAFT'::character varying, 'EDITED'::character varying, 'APPROVED'::character varying])::text[])))", true)
        );
    }

    @Override
    public JDailyReports as(String alias) {
        return new JDailyReports(DSL.name(alias), this);
    }

    @Override
    public JDailyReports as(Name alias) {
        return new JDailyReports(alias, this);
    }

    @Override
    public JDailyReports as(Table<?> alias) {
        return new JDailyReports(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDailyReports rename(String name) {
        return new JDailyReports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDailyReports rename(Name name) {
        return new JDailyReports(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDailyReports rename(Table<?> name) {
        return new JDailyReports(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDailyReports where(Condition condition) {
        return new JDailyReports(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDailyReports where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDailyReports where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDailyReports where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDailyReports where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDailyReports where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDailyReports where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDailyReports where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDailyReports whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDailyReports whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, UUID, LocalDate, JSONB, String, String, String, String, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super UUID, ? super UUID, ? super LocalDate, ? super JSONB, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super UUID, ? super UUID, ? super LocalDate, ? super JSONB, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

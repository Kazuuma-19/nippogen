/*
 * This file is generated by jOOQ.
 */
package com.example.backend.jooq.tables;


import com.example.backend.jooq.Indexes;
import com.example.backend.jooq.JPublic;
import com.example.backend.jooq.Keys;
import com.example.backend.jooq.tables.JUsers.JUsersPath;
import com.example.backend.jooq.tables.records.JTogglCredentialsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JTogglCredentials extends TableImpl<JTogglCredentialsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.toggl_credentials</code>
     */
    public static final JTogglCredentials TOGGL_CREDENTIALS = new JTogglCredentials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JTogglCredentialsRecord> getRecordType() {
        return JTogglCredentialsRecord.class;
    }

    /**
     * The column <code>public.toggl_credentials.id</code>.
     */
    public final TableField<JTogglCredentialsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.toggl_credentials.user_id</code>.
     */
    public final TableField<JTogglCredentialsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.toggl_credentials.api_key</code>.
     */
    public final TableField<JTogglCredentialsRecord, String> API_KEY = createField(DSL.name("api_key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.toggl_credentials.workspace_id</code>.
     */
    public final TableField<JTogglCredentialsRecord, Long> WORKSPACE_ID = createField(DSL.name("workspace_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.toggl_credentials.project_ids</code>.
     */
    public final TableField<JTogglCredentialsRecord, Integer[]> PROJECT_IDS = createField(DSL.name("project_ids"), SQLDataType.INTEGER.array(), this, "");

    /**
     * The column <code>public.toggl_credentials.default_tags</code>.
     */
    public final TableField<JTogglCredentialsRecord, String[]> DEFAULT_TAGS = createField(DSL.name("default_tags"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>public.toggl_credentials.time_zone</code>.
     */
    public final TableField<JTogglCredentialsRecord, String> TIME_ZONE = createField(DSL.name("time_zone"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("'UTC'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.toggl_credentials.include_weekends</code>.
     */
    public final TableField<JTogglCredentialsRecord, Boolean> INCLUDE_WEEKENDS = createField(DSL.name("include_weekends"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.toggl_credentials.is_active</code>.
     */
    public final TableField<JTogglCredentialsRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.toggl_credentials.created_at</code>.
     */
    public final TableField<JTogglCredentialsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.toggl_credentials.updated_at</code>.
     */
    public final TableField<JTogglCredentialsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JTogglCredentials(Name alias, Table<JTogglCredentialsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JTogglCredentials(Name alias, Table<JTogglCredentialsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.toggl_credentials</code> table reference
     */
    public JTogglCredentials(String alias) {
        this(DSL.name(alias), TOGGL_CREDENTIALS);
    }

    /**
     * Create an aliased <code>public.toggl_credentials</code> table reference
     */
    public JTogglCredentials(Name alias) {
        this(alias, TOGGL_CREDENTIALS);
    }

    /**
     * Create a <code>public.toggl_credentials</code> table reference
     */
    public JTogglCredentials() {
        this(DSL.name("toggl_credentials"), null);
    }

    public <O extends Record> JTogglCredentials(Table<O> path, ForeignKey<O, JTogglCredentialsRecord> childPath, InverseForeignKey<O, JTogglCredentialsRecord> parentPath) {
        super(path, childPath, parentPath, TOGGL_CREDENTIALS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JTogglCredentialsPath extends JTogglCredentials implements Path<JTogglCredentialsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JTogglCredentialsPath(Table<O> path, ForeignKey<O, JTogglCredentialsRecord> childPath, InverseForeignKey<O, JTogglCredentialsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JTogglCredentialsPath(Name alias, Table<JTogglCredentialsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JTogglCredentialsPath as(String alias) {
            return new JTogglCredentialsPath(DSL.name(alias), this);
        }

        @Override
        public JTogglCredentialsPath as(Name alias) {
            return new JTogglCredentialsPath(alias, this);
        }

        @Override
        public JTogglCredentialsPath as(Table<?> alias) {
            return new JTogglCredentialsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TOGGL_CREDENTIALS_USER_ID, Indexes.IDX_TOGGL_CREDENTIALS_USER_UNIQUE);
    }

    @Override
    public UniqueKey<JTogglCredentialsRecord> getPrimaryKey() {
        return Keys.TOGGL_CREDENTIALS_PKEY;
    }

    @Override
    public List<ForeignKey<JTogglCredentialsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TOGGL_CREDENTIALS__TOGGL_CREDENTIALS_USER_ID_FKEY);
    }

    private transient JUsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public JUsersPath users() {
        if (_users == null)
            _users = new JUsersPath(this, Keys.TOGGL_CREDENTIALS__TOGGL_CREDENTIALS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public JTogglCredentials as(String alias) {
        return new JTogglCredentials(DSL.name(alias), this);
    }

    @Override
    public JTogglCredentials as(Name alias) {
        return new JTogglCredentials(alias, this);
    }

    @Override
    public JTogglCredentials as(Table<?> alias) {
        return new JTogglCredentials(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTogglCredentials rename(String name) {
        return new JTogglCredentials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTogglCredentials rename(Name name) {
        return new JTogglCredentials(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTogglCredentials rename(Table<?> name) {
        return new JTogglCredentials(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTogglCredentials where(Condition condition) {
        return new JTogglCredentials(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTogglCredentials where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTogglCredentials where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTogglCredentials where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTogglCredentials where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTogglCredentials where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTogglCredentials where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTogglCredentials where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTogglCredentials whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTogglCredentials whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, String, Long, Integer[], String[], String, Boolean, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super UUID, ? super UUID, ? super String, ? super Long, ? super Integer[], ? super String[], ? super String, ? super Boolean, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super UUID, ? super UUID, ? super String, ? super Long, ? super Integer[], ? super String[], ? super String, ? super Boolean, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
